<?php
namespace callcenter\controllers;

use backend\models\AdminUserCaptcha;
use callcenter\models\AdminMessage;
use callcenter\models\AppLoginForm;
use callcenter\models\CollectionCallRecords;
use common\helpers\RedisQueue;
use common\services\client\ClientService;
use common\services\user\CaptchaService;
use callcenter\models\AdminCaptchaLog;
use callcenter\models\AdminLoginLog;
use Yii;
use yii\web\ForbiddenHttpException;
use yii\web\Response;
use callcenter\models\AdminUserRole;
use callcenter\models\AdminUser;
use common\models\user\UserCaptcha;

/**
 * Main controller
 */
class AppController extends BaseController {

    public $verifyPermission = false;
    public $enableCsrfValidation = false;


    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
        $this->getResponse()->format = Response::FORMAT_JSON;
    }



    /**
     * 登录
     */
    public function actionLogin() {
        $this->getResponse()->format = Response::FORMAT_JSON;
        $appInfo = Yii::$app->request->headers->get('appInfo');
        $appIv = Yii::$app->request->headers->get('appIv');
        $appKey = Yii::$app->request->headers->get('appKey');
        $service = new ClientService();
        $appInfo = $service->getClientInfo($appInfo,$appKey,$appIv);
        $appInfo = json_decode($appInfo, true);

        $model = new AppLoginForm();
        $model->load($this->request->post() , '');
        if ($model->login()) {
            if ($model->getUser()->role && $roleModel = AdminUserRole::find()->where(['name' => explode(',', $model->getUser()->role)])->all()) {
                $arr = array();
                foreach ($roleModel as $val) {
                    /**
                     * @var AdminUserRole $val
                     */
                    if ($val->permissions) {
                        $arr = array_unique(array_merge($arr, json_decode($val->permissions)));
                    }
                }

                Yii::$app->getSession()->set('permissions', json_encode($arr));
            }

            $user = $model->getUser();
            //记录登录日志
            $admin_login_log = new AdminLoginLog();
            $admin_login_log->user_id = $user->id;
            $admin_login_log->ip =$this->request->getUserIP();
            $admin_login_log->type = AdminLoginLog::TYPE_APP;
            $admin_login_log->username =$user->username;
            $admin_login_log->phone =$user->phone;
            $admin_login_log->app_version = $appInfo['appVersion'] ?? '';
            $admin_login_log->brand_name = $appInfo['brandName'] ?? '';
            $admin_login_log->device_id = $appInfo['deviceId'] ?? '';
            $admin_login_log->device_name = $appInfo['deviceName'] ?? '';
            $admin_login_log->save(false);

            UserCaptcha::deleteAll(['phone' => $model->getUser()->phone, 'type' => UserCaptcha::TYPE_ADMIN_LOGIN]);
            return [ 'code' => 0, 'message' => 'success' , 'data' => [
                'sessionId' => yii::$app->session->id
            ]];
        }else{
            return ['code' => -1, 'message' => $model->getErrorSummary(false)[0] ?? 'error'];
        }
    }

    /**
     * 获取登录验证码
     */
    public function actionPhoneCaptcha(){
        $this->getResponse()->format = Response::FORMAT_JSON;

        $username = trim($this->request->post('username'));
        if (!$username) {
            return ['code' => -1, 'message' => 'Username is incorrect'];
        }

        $user = AdminUser::findByUsername($username);

        if (!$user) {
            return ['code' => -1, 'message' => 'Username is incorrect'];
        }

        if(AdminUser::OPEN_STATUS_LOCK == $user->open_status)
        {
            return ['code' => -1, 'message' => 'Account has been locked. Please contact admin'];
        }

        $userService = new CaptchaService();
        if ($userService->generateAndSendCaptchaAdmin(trim($user->phone), AdminUserCaptcha::TYPE_ADMIN_CS_LOGIN)) {
            //记录发送验证码信息
            try{
                $admin_captcha_log = new AdminCaptchaLog();
                $admin_captcha_log->user_id = 0;
                $admin_captcha_log->username =$username;
                $admin_captcha_log->phone =trim($user->phone);
                $admin_captcha_log->ip =$this->request->getUserIP();
                $admin_captcha_log->type =AdminUserCaptcha::TYPE_ADMIN_CS_LOGIN;
                $admin_captcha_log->save();
            }
            catch (\Exception $e){
                return [
                    'code' => -1,
                    'message' => $e->getMessage()
                ];

            }

            return ['code' => 0, "message" => "success"];
        }
        else {
            return ['code' => -1, 'message' => 'OTP failed'];
        }


    }


    /**
     * 退出
     */
    public function actionLogout(){
        Yii::$app->user->logout();
        return ['code' => 0 , 'message' => 'success'];
    }


    /**
     *
     */
    public function actionUpload()
    {
        $datas = Yii::$app->request->post();
        if (yii::$app->user->isGuest) {
            return ['code' => -1, 'message' => ''];
        }
        $userId = yii::$app->user->getId();

        $callData = $datas['data'] ?? '';
        $callDataArray = json_decode($callData, true);
        foreach ($callDataArray as $data) {
            $callDateTime = intval(intval($data['callDateTime']) / 1000);
            $callType = intval($data['callType']);
            $callNumber = $data['callNumber'];
            $model = CollectionCallRecords::find()
                ->where([
                    'user_id'      => $userId,
                    'callType'     => $callType,
                    'callDateTime' => $callDateTime,
                    'callNumber'   => $callNumber,
                ])->exists();
            if (!$model) {
                $model = new CollectionCallRecords();
                $model->user_id = $userId;
                $model->callName = $data['callName'] ?? '';
                $model->callNumber = $callNumber;
                $model->callType = $callType;
                $model->callDate = $data['callDate'] ?? date('Y-m-d H:i:s', $callDateTime);
                $model->callDateTime = $callDateTime;
                $model->callDuration = intval($data['callDuration']);
                $model->save();
            }
        }
        return [
            'code'    => 0,
            'message' => 'success',
        ];
    }

    //是否有新消息
    public function actionNewMessageTip(){
        if(yii::$app->user->isGuest)
        {
            return ['code' => -1, 'message' => ''];
        }
        $userId = yii::$app->user->getId();
        if(RedisQueue::existSet(RedisQueue::COLLECTION_NEW_MESSAGE_TEAM_TL_UID,$userId)){
            $haveNewMessage = true;
        }else{
            $haveNewMessage = false;
        }
        $count = AdminMessage::find()->where(['admin_id' => $userId, 'status' => AdminMessage::STATUS_NEW])->count();
        if($count > 0){
            return [
                'code'    => 0,
                'message' => 'success',
                'data'    => ['haveNewMessage' => $haveNewMessage,'unreadMessageNumber' => $count],
            ];
        }else{
            return [
                'code'    => 0,
                'message' => 'success',
                'data'    => ['haveNewMessage' => $haveNewMessage,'unreadMessageNumber' => 0],
            ];
        }
    }

    //是否为管理者（组长）
    public function actionTabConfig(){
        if(yii::$app->user->isGuest)
        {
            throw new ForbiddenHttpException();
        }
        /** @var AdminUser $adminUser */
        $adminUser = yii::$app->user->identity;
        $group = AdminUserRole::getGroupByRoles($adminUser->role);
        if($group && in_array($group,[AdminUserRole::TYPE_BIG_TEAM_MANAGER,AdminUserRole::TYPE_SMALL_TEAM_MANAGER])){
            return [
                'code'    => 0,
                'message' => 'success',
                'data'    => ['isManager' => true],
            ];
        }else{
            return [
                'code'    => 0,
                'message' => 'success',
                'data'    => ['isManager' => false],
            ];
        }
    }
}