<?php
namespace backend\controllers;

use backend\models\ActionModel;
use backend\models\AdminNxUser;
use backend\models\AdminUser;
use backend\models\AdminUserRole;
use backend\models\Merchant;
use Yii;
use yii\validators\FileValidator;
use yii\web\Controller;
use yii\web\ForbiddenHttpException;
use  yii\helpers\Url;
use backend\models\AdminOperateLog;
use yii\web\UploadedFile;

/**
 * Base controller
 *
 * @property \yii\web\Request $request The request component.
 * @property \yii\web\Response $response The response component.
 */

abstract class BaseController extends Controller
{
    const MSG_NORMAL = 0;
    const MSG_SUCCESS = 1;
    const MSG_ERROR = 2;

    protected $merchantIds; //商户ID
    protected $isNotMerchantAdmin = false; //是否非商户管理员

    public $showPhoneAdminIds = [1,3,7,21,59,79,165,422,786];//2lushan 7wangpeng 21zhanghaiyun 59yanzhenlin 79xionghuakun  165zhufangqi 	422zhouchunlu 786changdaoyin
    public $isHiddenPhone = true;
    public $strategyOperating = false;
    public $canUseNx = false;

    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub

        if (Yii::$app->user->isGuest) {
            $this->merchantIds = 0;
        } else {
            if (Yii::$app->user->identity->merchant_id) {
                $this->merchantIds = Yii::$app->user->identity->merchant_id;
            } else {
                $this->isNotMerchantAdmin = true;

                if (!empty(Yii::$app->user->identity->to_view_merchant_id)) {
                    $arrMerchantIds = explode(',', Yii::$app->user->identity->to_view_merchant_id);
                    $this->merchantIds = $arrMerchantIds;
                } else {
                    $this->merchantIds = Merchant::getAllMerchantId();
                }

                $this->merchantIds[] = 0;

            }
            if(in_array(Yii::$app->user->identity->getId(),$this->showPhoneAdminIds)){
                $this->isHiddenPhone = false;
            }

            //1:wangcheng 2:meiyunfei 3:lushan 4:zhongyue 7:wangpeng 59:yanzhenlin 79:xionghuakun 165:zhufangqi 21:zhanghaiyun
            if(in_array(Yii::$app->user->identity->getId(),[
                1,
                2,
                3,
                4,
                7,
                59, //yanzhenlin
                79,132,356,439, //xionghuakun
                165,435,436,456, //zhufangqi
                423,424,455, //zhouchunlu
                21, //zhanghaiyun
                422,
                786, //changdaoyin
            ])){
                $this->strategyOperating = true;
            }

            $info = AdminUser::findOne(Yii::$app->user->identity->getId());
            if($info->nx_phone)
            {
                $this->canUseNx = true;
            }
        }
    }

    // 是否验证本系统的权限逻辑
    public $verifyPermission = true;

    public function beforeAction($action) {
        if (parent::beforeAction($action)) {
            //非线上环境强制 填写方法名称
            if (YII_ENV_DEV) {
                $permissionArr = Yii::$app->params['permissionControllers'];
                list($controllerId, $actionId) = explode('/', $this->getRoute());
                $className = str_replace(' ', '', ucwords(str_replace('-', ' ', $controllerId)));
                $controName = $className . "Controller";
                if (array_key_exists($controName, $permissionArr)) {
                    $actionName = str_replace(' ', '', ucwords(str_replace('-', ' ', $actionId)));
                    $class = "backend\\controllers\\" . $controName;
                    $action = "action" . $actionName;
                    $rf = new \ReflectionClass($class);
                    $method = $rf->getMethod($action);
                    $actionModel = new ActionModel($method);
                    $title = $actionModel->getTitle();
                    $name = $actionModel->getName();
                    if (empty($title) || ($title == $name)) {
                        throw new ForbiddenHttpException('抱歉，此控制器：' . $controName . '，此方法：' . $method->name . ', 没有添加注释请添加！如： @name 测试。');
                    }
                }
            }

            if (Yii::$app->request->get('frames')) {
                return $this->redirect(['main/index', 'action' => $this->getRoute()])->send();
            }
            if ($this->verifyPermission) {
                // 验证登录
                if (Yii::$app->user->getIsGuest()) {
                    return $this->redirect(['main/login'])->send();
                }
                $this->saveRequestLog();
                // 验证权限
                if (!Yii::$app->user->identity->getIsSuperAdmin()) {
                    $permissions = Yii::$app->getSession()->get('permissions');
                    if ($permissions) {
                        $permissions = json_decode($permissions, true);
                        if (!in_array($this->getRoute(), $permissions)) {
                            throw new ForbiddenHttpException('The admin role you belong to does not have this privilege');
                        }
                    } else {
                        $role = Yii::$app->user->identity->role;
                        if ($role) {
                            $roleModel = AdminUserRole::find()->andWhere("name in('" . implode("','", explode(',', $role)) . "')")->all();
                            if ($roleModel) {
                                $arr = array();
                                foreach ($roleModel as $val) {
                                    if ($val->permissions)
                                        $arr = array_unique(array_merge($arr, json_decode($val->permissions)));
                                }
                                Yii::$app->getSession()->set('permissions', json_encode($arr));
                                $permissions = json_decode($permissions, true);
                                if (!in_array($this->getRoute(), $permissions)) {
                                    throw new ForbiddenHttpException('The admin role you belong to does not have this privilege');
                                }
                            } else {
                                throw new ForbiddenHttpException('The admin role you belong to does not have this privilege');
                            }


                        } else {
                            throw new ForbiddenHttpException('The admin role you belong to does not have this privilege');
                        }
                    }
                }
            }

            return true;
        } else {
            return false;
        }
    }

    /**
     * 改变redirect的默认行为
     * 调用 yii\web\Response::send() 方法来确保没有其他内容追加到响应中
     *
     * @see yii\web\Controller::redirect()
     */
    public function redirect($url, $statusCode = 302, $isSend = true)
    {
        if (is_array($url)) {
            $url[0] = \yii\helpers\Inflector::camel2id($url[0]);
        } else {
            $url = \yii\helpers\Inflector::camel2id($url);
        }

        $response = parent::redirect($url, $statusCode);

        if ($isSend === true) {
            $response->send();
            exit;
        } else {
            return $response;
        }
    }

    /**
     * 获得请求对象
     */
    public function getRequest()
    {
        return \Yii::$app->getRequest();
    }

    /**
     * 获得返回对象
     */
    public function getResponse()
    {
        return \Yii::$app->getResponse();
    }

    /**
     * 跳转到提示页面
     * @param string $message 提示语
     * @param int $msgType 提示类型，不同提示类型提示语样式不一样
     * @param string $url 自动跳转url地址，不设置则默认显示返回上一页连接
     * @return string
     */
    public function redirectMessage($message, $msgType = self::MSG_NORMAL, $url = '')
    {
        switch ($msgType) {
            case self::MSG_SUCCESS:
                $messageClassName = 'infotitle2';
                break;
            case self::MSG_ERROR:
                $messageClassName = 'infotitle3';
                break;
            default:
                $messageClassName = 'marginbot normal';
                break;
        }
        return $this->render('/message', array(
            'message' => $message,
            'messageClassName' => $messageClassName,
            'url' => $url,
        ));
    }

    /*
     * 保存请求日志
     */
    private function saveRequestLog() {
        $route = Url::to();
        if (\yii::$app->request->method=='POST') {
            $params = array_merge($_GET, $_POST);
            if (isset($params['r'])) {
                unset($params['r']);
            }
            if (isset($params['_csrf'])) {
                unset($params['_csrf']);
            }
            if (isset($params['ADMIN_SID'])) {
                unset($params['ADMIN_SID']);
            }
            if(strpos($route,'&')!==false)
            {
                $route = strstr($route,'&',true);
            }
            $model = new AdminOperateLog();
            $model->merchant_id = Yii::$app->user->identity->merchant_id;
            $model->admin_user_id = Yii::$app->user->identity->id;
            $model->admin_user_name = Yii::$app->user->identity->username;
            $model->request = \yii::$app->request->method;
            $model->request_params = json_encode($params, JSON_UNESCAPED_UNICODE);
            $model->ip = Yii::$app->request->userIP;
            $model->route = $route;
            return $model->save();
        }
    }
    /*
     * 记录所有操作到日志
     */
    private function saveLog(){
        try{
            Log::info([
                'request_time' => time(),
                'admin_user_id' => Yii::$app->user->identity->id,
                'admin_user_name'=>Yii::$app->user->identity->username,
                'admin_user_phone'=>Yii::$app->user->identity->phone,
                'route'=>$this->getRoute(),
                'request' => [
                    'get'=>Yii::$app->request->get(),
                    'post'=>Yii::$app->request->post(),
                    ],
                'ip' => Yii::$app->request->userIP,
            ],Log::CATEGORY_ADMIN_REQUEST_LOG);
        }catch (\Exception $e){
            $e->getMessage();
        }
    }

    protected function _setcsvHeader($filename) {
        $now = gmdate("D, d M Y H:i:s");
        header("Expires: Tue, 03 Jul 2001 06:00:00 GMT");
        header("Cache-Control: max-age=0, no-cache, must-revalidate, proxy-revalidate");
        header("Last-Modified: {$now} GMT");
        // force download
        header("Content-Type: application/force-download");
        header("Content-Type: application/octet-stream");
        header("Content-Type: application/download");
        header("Content-type: application/vnd.ms-excel; charset=utf8");
        // disposition / encoding on response body
        header("Content-Disposition: attachment;filename={$filename}");
        header("Content-Transfer-Encoding: binary");
        //设置utf-8 + bom ，处理汉字显示的乱码
        print(chr(0xEF) . chr(0xBB) . chr(0xBF));
    }

    protected function _array2csv(&$array,$memory = '512M')
    {
        if (count($array) == 0 || !is_array($array)) {
            return null;
        }

        set_time_limit(0);//响应时间改为60秒
        ini_set('memory_limit', $memory);
        ob_start();
        $df = fopen("php://output", 'w');
        fputcsv($df, array_keys(reset($array)));
        foreach ($array as $row) {
            fputcsv($df, $row);
        }
        fclose($df);
        return ob_get_clean();
    }

    /**
     * 检测是否有导出权限
     */
    protected function _canExportData(){
        $can = true;
        $is_admin = Yii::$app->user->identity->getIsSuperAdmin();
        $role_str = Yii::$app->user->identity->role;
        $role_arr = (!empty($role_str)) ? explode('-',$role_str) : [];
        if(!$is_admin && !in_array('super_dev', $role_arr)){//如果不是superadmin或者角色不是super_dev则需要判断该用户是否有权限
            $user_arr = Yii::$app->params['ExportDataUser'];
            $user_name = Yii::$app->user->identity->username;
            if(!in_array($user_name, $user_arr )){
                $can = false;
            }
        }
        return $can;
    }

    /**
     * 开放搜索
     */
    protected function AdminSearch($key=null){

    }

    protected function _array2csv2(&$array, $stop)
    {
        if (empty($array)) {
            return "不能导空数据";
        }
        if (!is_array($array)) {
            return "参数有误，不是数组";
        }
        set_time_limit(0);//响应时间改为60秒
        ini_set('memory_limit', '1024M');
        ob_start();
        $df = fopen("php://output", 'w');
        fputcsv($df, array_keys(reset($array)));
        foreach ($array as $row) {
            fputcsv($df, $row);
        }
        if($stop) {
            fclose($df);
            return ob_get_clean();
        } else {
            return '';
        }


    }


    /**
     * @param UploadedFile $file
     * @return string
     * @throws \OSS_Exception
     */
    protected function uploadImageFromFileInstance(UploadedFile $file)
    {
        $validator                           = new FileValidator();
        $validator->extensions               = ['jpg', 'jpeg', 'png', 'gif'];
        $validator->maxSize                  = 1024 * 1024;
        $validator->checkExtensionByMimeType = false;

        $error = "";
        if (!$validator->validate($file, $error)) {
            echo $this->redirectMessage("图片验证失败：{$error}", self::MSG_ERROR);
            exit;
        }

        $file_path = $file->tempName;
        $object    = date('Ymd', time()) . '/' . StringHelper::generateUniqid() . '.' . $file->extension;
        $response  = (new \ALIOSS())->upload_file_by_file(DEFAULT_OSS_BUCKET, $object, $file_path);
        if (!$response->isOK()) {
            echo $this->redirectMessage("上传失败：{$response->body}", self::MSG_ERROR);
            exit;
        }

        return OSS_RES_URL . $object;
    }

}
