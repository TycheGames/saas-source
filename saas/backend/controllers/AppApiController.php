<?php
namespace backend\controllers;

use backend\models\AdminUserCaptcha;
use backend\models\AppLoginForm;
use backend\models\RemindCallRecords;
use backend\models\ReminderCallData;
use common\helpers\RedisQueue;
use common\services\client\ClientService;
use common\services\message\WeWorkService;
use common\services\user\CaptchaService;
use backend\models\AdminCaptchaLog;
use backend\models\AdminLoginLog;
use Yii;
use yii\web\Response;
use backend\models\AdminUserRole;
use backend\models\AdminUser;
use common\models\user\UserCaptcha;

/**
 * Main controller
 */
class AppApiController extends BaseController {

    public $verifyPermission = false;
    public $enableCsrfValidation = false;


    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
        $this->getResponse()->format = Response::FORMAT_JSON;
    }


    /**
     * 登录
     */
    public function actionLogin() {
        $this->getResponse()->format = Response::FORMAT_JSON;

        if(yii::$app->request->isPost)
        {
            $appInfo = Yii::$app->request->headers->get('appInfo');
            $appIv = Yii::$app->request->headers->get('appIv');
            $appKey = Yii::$app->request->headers->get('appKey');
            $service = new ClientService();
            $appInfo = $service->getClientInfo($appInfo,$appKey,$appIv);
            $appInfo = json_decode($appInfo, true);

            $model = new AppLoginForm();
            $model->load($this->request->post() , '');
            if ($model->login()) {
                if ($model->getUser()->role && $roleModel = AdminUserRole::find()->where(['name' => explode(',',$model->getUser()->role)])->all()) {
                    $arr = array();
                    foreach ($roleModel as $val) {
                        /**
                         * @var AdminUserRole $val
                         */
                        if ($val->permissions) {
                            $arr = array_unique(array_merge($arr, json_decode($val->permissions)));
                        }
                    }

                    Yii::$app->getSession()->set('permissions', json_encode($arr));
                }

                $user = $model->getUser();
                //记录登录日志
                $admin_login_log = new AdminLoginLog();
                $admin_login_log->user_id = $user->id;
                $admin_login_log->type = AdminLoginLog::TYPE_APP;
                $admin_login_log->ip =$this->request->getUserIP();
                $admin_login_log->username =$user->username;
                $admin_login_log->phone =$user->phone;
                $admin_login_log->app_version = $appInfo['appVersion'];
                $admin_login_log->brand_name = $appInfo['brandName'];
                $admin_login_log->device_id = $appInfo['deviceId'];
                $admin_login_log->device_name = $appInfo['deviceName'];
                $admin_login_log->save(false);

                UserCaptcha::deleteAll(['phone' => $model->getUser()->phone, 'type' => UserCaptcha::TYPE_ADMIN_LOGIN]);
                return [ 'code' => 0, 'message' => 'success' , 'data' => [
                    'sessionId' => yii::$app->session->id
                ]];
            }else{
                return ['code' => -1, 'message' => $model->getErrorSummary(false)[0] ?? '未知错误'];
            }
        }

    }

    /**
     * 获取登录验证码
     */
    public function actionPhoneCaptcha(){
        $this->getResponse()->format = Response::FORMAT_JSON;

        if(yii::$app->request->isPost)
        {
            $username = trim($this->request->post('username'));
            if (!$username) {
                return ['code' => -1, 'message' => 'Username is incorrect'];
            }

            $user = AdminUser::findByUsername($username);

            if (!$user) {
                return ['code' => -1, 'message' => 'Username is incorrect'];

            }
            if(AdminUser::OPEN_STATUS_LOCK == $user->open_status)
            {
                return ['code' => -1, 'message' => 'Account has been locked. Please contact admin'];
            }


            $userService = new CaptchaService();
            if ($userService->generateAndSendCaptchaAdmin(trim($user->phone), AdminUserCaptcha::TYPE_ADMIN_LOGIN)) {
                //记录发送验证码信息
                try{
                    $admin_captcha_log = new AdminCaptchaLog();
                    $admin_captcha_log->user_id = 0;
                    $admin_captcha_log->username =$username;
                    $admin_captcha_log->phone =trim($user->phone);
                    $admin_captcha_log->ip =$this->request->getUserIP();
                    $admin_captcha_log->type =AdminUserCaptcha::TYPE_ADMIN_LOGIN;
                    $admin_captcha_log->save();
                }
                catch (\Exception $e){

                }

                return ['code' => 0, "message" => "success"];
            }
            else {
                return ['code' => -1, 'message' => 'OTP failed'];
            }

        }


    }


    /**
     * 退出
     */
    public function actionLogout(){
        Yii::$app->user->logout();
        return ['code' => 0, 'message' => 'success'];
    }

    /**
     *
     */
    public function actionUpload()
    {
        $datas = Yii::$app->request->post();
        yii::info($datas, 'remind_app_upload');
        if (yii::$app->user->isGuest) {
            return ['code' => -1, 'message' => ''];
        }
        $userId = yii::$app->user->getId();

        $callData = $datas['data'] ?? '';
        $callDataArray = json_decode($callData, true);
        foreach ($callDataArray as $data) {
            $callDateTime = intval(intval($data['callDateTime']) / 1000);
            $callType = intval($data['callType']);
            $callNumber = $data['callNumber'];
            $model = RemindCallRecords::find()
                ->where([
                    'user_id'      => $userId,
                    'callType'     => $callType,
                    'callDateTime' => $callDateTime,
                    'callNumber'   => $callNumber,
                ])->exists();
            if (!$model) {
                $model = new RemindCallRecords();
                $model->user_id = $userId;
                $model->callName = $data['callName'] ?? '';
                $model->callNumber = $callNumber;
                $model->callType = $callType;
                $model->callDate = $data['callDate'] ?? date('Y-m-d H:i:s', $callDateTime);
                $model->callDateTime = $callDateTime;
                $model->callDuration = intval($data['callDuration']);
                if($model->save()){
                    $date = date('Y-m-d');
                    if($model->callType == RemindCallRecords::CALL_TYPE_OUT
                        && date('Y-m-d',$model->callDateTime) == $date){
                        //呼出类型即拨打
                        $callNumber = substr($model->callNumber,-10);
                        $callDuration = $model->callDuration;
                        $callName = $model->callName;
                        RedisQueue::push([RedisQueue::LIST_REMIND_APP_CALL_RECORDS, json_encode([
                            'user_id' => $userId,
                            'call_number' => $callNumber,
                            'call_duration' => $callDuration,
                            'call_name' => $callName,
                            'date' => $date,
                        ])]);
                    }
                }
            }
        }
        return [
            'code'    => 0,
            'message' => 'success',
        ];
    }
}